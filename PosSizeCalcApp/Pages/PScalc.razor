@page "/pscalc"

@using System.Net.Http.Json
@inject HttpClient httpClient
@inject ISnackbar Snackbar

<PageTitle>pscalc</PageTitle>

<h1>Position Size Calculator</h1>



<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add data</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudNumericField @bind-Value="AccountSize" Label="Account Size" Variant="Variant.Text" Step="1.00M" Format="N2"></MudNumericField>
        <MudNumericField @bind-Value="AssetPrice" Label="Asset Price" Variant="Variant.Text" Format="N2"></MudNumericField>
        <MudNumericField @bind-Value="Stoploss" Label="Stoploss" Variant="Variant.Text" Step=".05M" Format="N2"></MudNumericField>
        <MudNumericField @bind-Value="Risk" Label="Risk" Variant="Variant.Text" Step=".05M" Format="N2"></MudNumericField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Add data</MudButton>
    </MudCardContent>
</MudCard>

<br />

<MudTable Elevation="25" Items="GetData()" @bind-Value="data"
        @bind-SelectedItem="selectedItem1"
          RowEditPreview="BackupItem"
          RowEditCancel="ResetItemToOriginalValues"
CanCancelEdit = "true"
OnCommitEditClick="@(() => Snackbar.Add("Edit Saved"))"
>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Data</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Account Size</MudTh>
        <MudTh>Asset Price</MudTh>
        <MudTh>Stoploss</MudTh>
        <MudTh>Risk</MudTh>
        <MudTh>PosSizeDollar</MudTh>
        <MudTh>AssetAmount</MudTh>
    </HeaderContent>
    <RowEditingTemplate>
        <MudTd DataLabel="AccountSize">
            <MudNumericField @bind-Value="@context.AccountSize" Required Format="N2"/>
        </MudTd>
        <MudTd DataLabel="AssetPrice">
            <MudNumericField @bind-Value="@context.AssetPrice" Required Format="N2"/>
        </MudTd>
        <MudTd DataLabel="Stoploss">
            <MudNumericField @bind-Value="@context.Stoploss" Required Step=".05M" Format="N2"/>
        </MudTd>
        <MudTd DataLabel="Risk">
            <MudNumericField @bind-Value="@context.Risk" Required Step=".05M" Format="N2"/>
        </MudTd>
        <MudTd DataLabel="PosSizeDollar">
            <MudTextField Format="N3" @bind-Value="@context.PosSizeDollar" ReadOnly />
        </MudTd>
         <MudTd DataLabel="AssetAmount">
            <MudTextField Format="N3" @bind-Value="@context.AssetAmount" ReadOnly />
        </MudTd>
    </RowEditingTemplate>
    <RowTemplate>
        <MudTd DataLabel="AccountSize">@context.AccountSize</MudTd>
        <MudTd DataLabel="AssetPrice">@context.AssetPrice</MudTd>
        <MudTd DataLabel="Stoploss">@context.Stoploss</MudTd>
        <MudTd DataLabel="Risk">@context.Risk</MudTd>
        <MudTd DataLabel="Pos Size Dollar" Style="background-color:lightskyblue; font-weight:bold">
            @context.PosSizeDollar
        </MudTd>
        <MudTd DataLabel="Pos Size Dollar" Style="background-color:lightskyblue; font-weight:bold">
            @context.AssetAmount
        </MudTd>
    </RowTemplate>
</MudTable>

@*<MudText Inline="true">Selected1: @selectedItem1?.Name</MudText>*@

@code {
    public decimal AccountSize { get; set; }
    public decimal AssetPrice { get; set; }
    public decimal Risk { get; set; }
    public decimal Stoploss { get; set; }

    private DataPos selectedItem1 = null;
    private DataPos elementBeforeEdit;
    private HashSet<DataPos> selectedItems1 = new HashSet<DataPos>();

    private IEnumerable<DataPos> Elements = new List<DataPos>();

    public DataPos data = new DataPos();
    public List<DataPos> dataPosList = new List<DataPos>();
    protected override async Task OnInitializedAsync()
    {
        GetData();
    }


    public List<DataPos> GetData()
    {
        if (data != null)
        {
            return dataPosList;
        }
        else
        {
            return new List<DataPos>();
        }

    }

    public void Save()
    {
        dataPosList.Add(
            new DataPos
                {
                    AccountSize = AccountSize,
                    AssetPrice = AssetPrice,
                    Risk = Risk,
                    Stoploss = Stoploss
                }
        );

        GetData();

        Snackbar.Add("New row added");
    }


    public class DataPos
    {
        public decimal AccountSize;
        public decimal AssetPrice;
        public decimal Stoploss;
        public decimal Risk;

        public decimal PosSizeDollar { get { return Math.Round(AccountSize * Risk / Stoploss, 3); } set { } }
        public decimal AssetAmount { get { return Math.Round(PosSizeDollar / AssetPrice, 3); } set { } }
    }



    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            AccountSize = ((DataPos)element).AccountSize,
            AssetPrice = ((DataPos)element).AssetPrice,
            Stoploss = ((DataPos)element).Stoploss,
            Risk = ((DataPos)element).Risk
        };
    }



    private void ResetItemToOriginalValues(object element)
    {
        ((DataPos)element).AccountSize = elementBeforeEdit.AccountSize;
        ((DataPos)element).AssetPrice = elementBeforeEdit.AssetPrice;
        ((DataPos)element).Stoploss = elementBeforeEdit.Stoploss;
        ((DataPos)element).Risk = elementBeforeEdit.Risk;
        Snackbar.Add("Edit row cancelled");
    }

  
}

